<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(45deg, #4f46e5, #7c3aed);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 2px solid #e9ecef;
        }

        .tab {
            flex: 1;
            padding: 15px 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .tab.active {
            background: white;
            color: #4f46e5;
            border-bottom: 2px solid #4f46e5;
        }

        .tab-content {
            padding: 30px;
        }

        .tab-panel {
            display: none;
        }

        .tab-panel.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #374151;
        }

        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: #4f46e5;
            color: white;
        }

        .btn-primary:hover {
            background: #3730a3;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-warning {
            background: #f59e0b;
            color: white;
        }

        .btn-warning:hover {
            background: #d97706;
        }

        .employee-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .employee-table th, .employee-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }

        .employee-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #374151;
        }

        .employee-table tr:hover {
            background: #f9fafb;
        }

        .search-box {
            width: 100%;
            padding: 15px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 16px;
            margin-bottom: 20px;
        }

        .search-box:focus {
            outline: none;
            border-color: #4f46e5;
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .alert-success {
            background: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }

        .alert-error {
            background: #fee2e2;
            color: #991b1b;
            border: 1px solid #fca5a5;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            text-align: center;
            border-left: 4px solid #4f46e5;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #4f46e5;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #6b7280;
            font-weight: 500;
        }

        .loading {
            text-align: center;
            padding: 50px;
            color: #6b7280;
        }

        .loading::after {
            content: '‚è≥';
            font-size: 2rem;
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .tabs {
                flex-direction: column;
            }
            
            .container {
                margin: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè¢ Employee Management System</h1>
            <p>Manage your workforce efficiently</p>
        </div>

        <div class="tabs">
            <button class="tab active" onclick="showTab('list')">üìã Employee List</button>
            <button class="tab" onclick="showTab('add')">‚ûï Add Employee</button>
            <button class="tab" onclick="showTab('analytics')">üìä Analytics</button>
        </div>

        <div class="tab-content">
            <!-- Employee List Tab -->
            <div id="list-tab" class="tab-panel active">
                <h2>Employee Directory</h2>
                <input type="text" id="searchInput" class="search-box" placeholder="üîç Search employees by name, department, or position...">
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="totalEmployees">0</div>
                        <div class="stat-label">Total Employees</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalDepartments">0</div>
                        <div class="stat-label">Departments</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="avgSalary">$0</div>
                        <div class="stat-label">Average Salary</div>
                    </div>
                </div>

                <button class="btn btn-success" onclick="loadEmployees()">üîÑ Refresh List</button>
                <button class="btn btn-primary" onclick="createSampleData()">üìÑ Create Sample Data</button>

                <div id="employeeList">
                    <div class="loading">Loading employees...</div>
                </div>
            </div>

            <!-- Add Employee Tab -->
            <div id="add-tab" class="tab-panel">
                <h2>Add New Employee</h2>
                <div id="addMessage"></div>
                
                <form id="employeeForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="name">Full Name *</label>
                            <input type="text" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="email">Email Address *</label>
                            <input type="email" id="email" name="email" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="department">Department *</label>
                            <select id="department" name="department" required>
                                <option value="">Select Department</option>
                                <option value="Engineering">Engineering</option>
                                <option value="Marketing">Marketing</option>
                                <option value="HR">Human Resources</option>
                                <option value="Finance">Finance</option>
                                <option value="Operations">Operations</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="position">Position *</label>
                            <input type="text" id="position" name="position" required>
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="salary">Salary *</label>
                            <input type="number" id="salary" name="salary" min="0" step="1000" required>
                        </div>
                        <div class="form-group">
                            <label for="phone">Phone Number</label>
                            <input type="tel" id="phone" name="phone">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="hire_date">Hire Date</label>
                        <input type="date" id="hire_date" name="hire_date">
                    </div>
                    
                    <button type="submit" class="btn btn-primary">üíæ Add Employee</button>
                    <button type="button" class="btn btn-warning" onclick="resetForm()">üîÑ Reset Form</button>
                </form>
            </div>

            <!-- Analytics Tab -->
            <div id="analytics-tab" class="tab-panel">
                <h2>Employee Analytics</h2>
                <button class="btn btn-primary" onclick="loadAnalytics()">üìä Load Analytics</button>
                
                <div id="analyticsData">
                    <div class="loading">Click "Load Analytics" to see department statistics...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const API_BASE_URL = 'http://localhost:8001';
        let employees = [];
        let editingEmployeeId = null;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            loadEmployees();
            setupEventListeners();
        });

        // Event Listeners
        function setupEventListeners() {
            // Form submission
            document.getElementById('employeeForm').addEventListener('submit', handleFormSubmit);
            
            // Search functionality
            document.getElementById('searchInput').addEventListener('input', filterEmployees);
        }

        // Tab Management
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-panel').forEach(panel => {
                panel.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Show selected tab
            document.getElementById(`${tabName}-tab`).classList.add('active');
            event.target.classList.add('active');
        }

        // API Functions
        async function apiCall(endpoint, method = 'GET', data = null) {
            const config = {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                }
            };

            if (data) {
                config.body = JSON.stringify(data);
            }

            try {
                const response = await fetch(`${API_BASE_URL}${endpoint}`, config);
                
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(`HTTP ${response.status}: ${errorData.detail || response.statusText}`);
                }

                return await response.json();
            } catch (error) {
                console.error('API Error:', error);
                showMessage(`Error: ${error.message}`, 'error');
                throw error;
            }
        }

        // Load Employees
        async function loadEmployees() {
            try {
                employees = await apiCall('/employees');
                displayEmployees(employees);
                updateStats();
            } catch (error) {
                document.getElementById('employeeList').innerHTML = 
                    '<div class="alert alert-error">Failed to load employees. Make sure your API server is running on localhost:8001</div>';
            }
        }

        // Display Employees
        function displayEmployees(employeeList) {
            const container = document.getElementById('employeeList');
            
            if (employeeList.length === 0) {
                container.innerHTML = '<div class="alert alert-error">No employees found. Try creating some sample data first.</div>';
                return;
            }

            const table = `
                <table class="employee-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Department</th>
                            <th>Position</th>
                            <th>Salary</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${employeeList.map(emp => `
                            <tr>
                                <td>${emp.employee_id || emp.id}</td>
                                <td>${emp.name}</td>
                                <td>${emp.email}</td>
                                <td>${emp.department}</td>
                                <td>${emp.position}</td>
                                <td>$${emp.salary?.toLocaleString()}</td>
                                <td>
                                    <button class="btn btn-warning" onclick="editEmployee(${emp.employee_id || emp.id})">‚úèÔ∏è Edit</button>
                                    <button class="btn btn-danger" onclick="deleteEmployee(${emp.employee_id || emp.id})">üóëÔ∏è Delete</button>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            
            container.innerHTML = table;
        }

        // Update Statistics
        function updateStats() {
            document.getElementById('totalEmployees').textContent = employees.length;
            
            const departments = [...new Set(employees.map(emp => emp.department))];
            document.getElementById('totalDepartments').textContent = departments.length;
            
            const avgSalary = employees.length > 0 
                ? employees.reduce((sum, emp) => sum + (emp.salary || 0), 0) / employees.length
                : 0;
            document.getElementById('avgSalary').textContent = `$${Math.round(avgSalary).toLocaleString()}`;
        }

        // Form Handling
        async function handleFormSubmit(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const employeeData = {
                name: formData.get('name'),
                email: formData.get('email'),
                department: formData.get('department'),
                position: formData.get('position'),
                salary: parseFloat(formData.get('salary')),
                phone: formData.get('phone'),
                hire_date: formData.get('hire_date')
            };

            // Add employee_id for testing (remove this once backend is fixed)
            if (!editingEmployeeId) {
                employeeData.employee_id = employees.length + 1;
            }

            try {
                if (editingEmployeeId) {
                    await apiCall(`/employees/${editingEmployeeId}`, 'PUT', employeeData);
                    showMessage('Employee updated successfully!', 'success');
                } else {
                    await apiCall('/employees', 'POST', employeeData);
                    showMessage('Employee added successfully!', 'success');
                }
                
                resetForm();
                loadEmployees();
                showTab('list');
            } catch (error) {
                showMessage(`Failed to save employee: ${error.message}`, 'error');
            }
        }

        // Create Sample Data
        async function createSampleData() {
            try {
                await apiCall('/employees/sample-data', 'POST');
                showMessage('Sample data created successfully!', 'success');
                loadEmployees();
            } catch (error) {
                showMessage('Failed to create sample data', 'error');
            }
        }

        // Edit Employee
        async function editEmployee(id) {
            try {
                const employee = await apiCall(`/employees/${id}`);
                
                // Fill the form
                document.getElementById('name').value = employee.name;
                document.getElementById('email').value = employee.email;
                document.getElementById('department').value = employee.department;
                document.getElementById('position').value = employee.position;
                document.getElementById('salary').value = employee.salary;
                document.getElementById('phone').value = employee.phone || '';
                document.getElementById('hire_date').value = employee.hire_date || '';
                
                editingEmployeeId = id;
                showTab('add');
                
                // Update form title
                document.querySelector('#add-tab h2').textContent = 'Edit Employee';
                document.querySelector('button[type="submit"]').textContent = 'üíæ Update Employee';
                
            } catch (error) {
                showMessage('Failed to load employee data', 'error');
            }
        }

        // Delete Employee
        async function deleteEmployee(id) {
            if (!confirm('Are you sure you want to delete this employee?')) {
                return;
            }

            try {
                await apiCall(`/employees/${id}`, 'DELETE');
                showMessage('Employee deleted successfully!', 'success');
                loadEmployees();
            } catch (error) {
                showMessage('Failed to delete employee', 'error');
            }
        }

        // Reset Form
        function resetForm() {
            document.getElementById('employeeForm').reset();
            editingEmployeeId = null;
            document.querySelector('#add-tab h2').textContent = 'Add New Employee';
            document.querySelector('button[type="submit"]').textContent = 'üíæ Add Employee';
        }

        // Search/Filter Employees
        function filterEmployees() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filteredEmployees = employees.filter(emp => 
                emp.name.toLowerCase().includes(searchTerm) ||
                emp.department.toLowerCase().includes(searchTerm) ||
                emp.position.toLowerCase().includes(searchTerm) ||
                emp.email.toLowerCase().includes(searchTerm)
            );
            displayEmployees(filteredEmployees);
        }

        // Load Analytics
        async function loadAnalytics() {
            try {
                const avgSalaryData = await apiCall('/employees/avg-salary');
                displayAnalytics(avgSalaryData);
            } catch (error) {
                document.getElementById('analyticsData').innerHTML = 
                    '<div class="alert alert-error">Failed to load analytics data</div>';
            }
        }

        // Display Analytics
        function displayAnalytics(data) {
            const container = document.getElementById('analyticsData');
            
            let html = '<div class="stats-grid">';
            
            if (data.average_salary_by_department) {
                Object.entries(data.average_salary_by_department).forEach(([dept, salary]) => {
                    html += `
                        <div class="stat-card">
                            <div class="stat-value">$${Math.round(salary).toLocaleString()}</div>
                            <div class="stat-label">${dept} Avg Salary</div>
                        </div>
                    `;
                });
            }
            
            html += '</div>';
            container.innerHTML = html;
        }

        // Show Messages
        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-error';
            const messageHtml = `<div class="alert ${alertClass}">${message}</div>`;
            
            // Show in add tab
            document.getElementById('addMessage').innerHTML = messageHtml;
            
            // Clear after 5 seconds
            setTimeout(() => {
                document.getElementById('addMessage').innerHTML = '';
            }, 5000);
        }
    </script>
</body>
</html>